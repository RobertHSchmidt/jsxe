TODO:
* This file is mostly used for maintaining ideas about what/where/when new
* features will be added to jsXe. It is in no way official as tasks may be moved
* from version to version and added or dropped.

* General

    & Slowly document methods with javadoc.

    & Slowly prefix instance variables with m_ as a naming convention.

    & DOMSerializer should support the following parameters:
        well-formed
        - Is this necessary? The DOM representation can't really be
          non-well-formed can it? It provides error checking for invalid
          characters and such.
        xml-declaration
        check-character-normalization
        entities
        normalize-characters
            This maybe needs to be done after I better understand and have
            built methods for interacting with the DTD.
        ignore-unknown-character-denormalizations

    & Serialized XML should be 100% well-formed and parsable.
    
    & Will need to eventually re-factor code in net.sourceforge.jsxe.dom,
      especially XMLDocument (it's too big)
      This will be required to more easily go from text locations to nodes
      and vice versa as well as allow for a more clean data model.

* Version 0.4 beta (DTD/Schema support)
    
    * Need some way of editing DOCTYPE nodes. DOM level 2 seems to not have
      support for this. jsXe needs to recognize when a document has a DTD and
      deal with serializing to it if necessary. Investigate XNI or whatever
      that is part of the xerces distribution as a way to do this.
    
    * Implement serialization support having to do with DTD/Schema support.
    
* Version 0.5 beta (Actions)
    
* Version 0.6 beta (GUI focus)
    
    * Allow Views to be split so that one DocumentView can be displayed left/top
      and one on the right/bottom. Views should be able to update automatically
      using some sort of listener interface. How would you sync between views?
      Some will required well formedness or validation to a schema and some will
      not. What happens if one view invalidates the document with the other
      view?
    
    * Add threading support and allow multiple windows/Views to be open for one
      document at once. This can let you edit a document using one view and
      view it using another. Views should be able to update automatically using
      some sort of listener interface.  This will be another option to allow users
      to see more than one view of the document at the same time. How would you
      handle editing using a view that uses source and one that uses the tree
      structure at the same time?
      
    * Add a ghosted image of the node to drag and drop cursor. Hopefully the
      whole cursor can be replaced with the image since the default drag
      cursor is dumb in linux.
    
* Version 0.7 beta
    
    * Build into the interfaces support for printing. Implement printing
      support in the Default View and SourceView
    
    * Add a command line option so that a user can specify the view to open
      the document with. This will allow you to open large document in the
      source view without parsing it into the tree view using DOM.
    
    * Add an option when opening documents that lets users specify which
      installed view to open the document with.
    
    * Look for ways to improve efficiency with large XML documents
        * Improve performance in whatever ways are possible
    
* Version 0.8 beta

    * Bug fixes?

* Version 0.9 beta

    * Bug fixes?

* Version 1.0

    * Bug fixes?

* Plugins
    
    * Implement the xsl transformation feature as a plugin.
    
    * Implement a plugin to view xsl:fo documents. Look at XSmiles for this.
      See www.x-smiles.org
    
    * Create a view that uses the view from pollo and implements the
      DocumentView interface. See pollo.sourceforge.net
    
    * Create a view that uses the view from Jaxe and implements the
      DocumentView interface. See jaxe.sourceforge.net
    
    * Create a view for editing doc-book files using the components in the
      Vex editor. See vex.sourceforge.net
    
    * Create a view for XHTML documents. This could probobly be an extension
      of the JEditorPane class that uses an adapter to attempt to transform
      XHTML into HTML 3.2 so that the canned JEditorPane can render it properly.
      Maybe XSmiles can do this too. See www.x-smiles.org. Maybe look for other
      java XHTML browsers.
    
    * Implement a Schema Diagram plugin that can show Schema as a flow like
      diagram. Look at the JGraph components for this. www.jgraph.com.
      Eventually add support to allow editing of schemas
    
