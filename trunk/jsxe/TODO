TODO:

    * Document methods with javadoc.
    
    * Work on performance problems when loading an XML document. (Hint: setModel
      in DefaultXMLDocument.java)
    
    * Change the XMLDocument interface to use something else but validate().
      This is confusing and dumb.
    
    * Research the EntityResolver class and see if it can be used to resolve
      DTD files.
    
    * Build an adapter for DocumentBuilder so that it implements the DOM3
      standard DOMBuilder interface? Maybe use it with DOMSerializer to created
      filtered documents? Or use a TreeWalker to serialize?
    
    * Add funtionality for dirty files.
    
    * Allow for selecting multiple files when opening.
    
    * Fix the options dialog and make it look better. Maybe split into two
      dialogs, global options and view/document specific? Maybe even three
      dialogs, one for global options, one for view options, one for document
      options.
    
    * Allow for opening files with wellformedness errors in source view. This
      way users can fix wellformedness errors in the editor.
    
    * Release new version (0.2.1).
    
    * Use the Nodefilter interface with the DefaultView to determine which types
      of nodes to show.
    
    * Update the DOM3 classes to the current version of the DOM3 interfaces.
      DOMSerializer needs to be renamed. DOMSerializerConfiguration needs to
      be updated to support the parameters specified in DOM3 javadoc for
      DOMSerializer.
    
    * Add full support for namespaces. (adding, editing, serialization, etc.)
    
    * Currently AdapterNodes only wrap the Node interface and create new
      instances of itself when queried. Have AdapterNode implement the TreeNode
      interface and create a tree around the DOM so that new AdapterNodes are
      not created on the fly. This will allow the TreeModel to have a static
      model i.e. The instances of AdapterNode won't change everytime the
      TreeModel is queried by the JTree. e.g. Currently when I create a TreePath
      and call updateUI the TreePath is no longer valid because it contains
      objects no longer in the TreeModel. So when updating the UI I can't tell
      which Nodes were previously visable.
    
    * Redo the interface for XMLDocuments and AdapterNodes so that DOM
      implementation used in a more limited way. Implement Document editing
      methods.
    
    * Allow GUI models to register change listeners with XMLDocuments and
      AdapterNodes. This will allow GUI models to be updated automatically when
      the DOM is changed. Also add property change listeners so that views can
      be updated when properties (options) change.
    
    * Make sure jsXe can deal with all types of XML nodes.
    
    * Change icons in tree in DocumentView to be different for different types
      of XML nodes.
    
    * Release new version (0.3.1).
    
    * Implement undo for the DefaultView and SourceView.
    
    * Create a feature to edit source for 1 node only. (Not sure how to do this
      given current design. How would I allow the source view to do that?)
    
    * Create a way for actions to be created dynamically and then registered
      with jsXe. Much the same way that jEdit does.
    
    * Redo gui actions to include key mnemonics etc. so it acts like you would
      expect.
    
    * Create a toolbar that is customizable much the same way jEdit's is.
    
    * Create an interface for the main view in jsXe where the TabbedView
      implements it. Other views can then be created to allow a more
      customizable look.
    
    * Release new version (0.4.1)
    
    * Implement syntax highlighting for the SourceView.
    
    * Add drag & drop functionality to the default view.
    
    * Create a history class for the DefaultView that keeps track of the current
      state of the view and can be used to restore it later.
    
    * Fix updating of the tree when users are changing a text node.
    
    * Release new version (0.5.1).
    
    * Implement plugin support with BeanShell. Make DocumentViews into plugins
      that are loaded at runtime. DefaultView and SourceView will be distributed
      with jsXe as the default views.
    
    * Add a way for jsXe to try to open a document in any of the installed views
      before it shows errors saying it cannot open the document. i.e. If a
      document is not validated try to open it in the requested view and if that
      fails then open it in one of the remaining installed views until it works
      or you run out of views.
    
    * Create an install program for jsXe.
    
    * Release new version (0.6.1)
    
    * Create a view that uses the view from pollo and implements the
      DocumentView interface.
    
    * Implement the xsl transformation feature.
    
    * Implement validation against DTDs and different forms of Schema.
    
    * Create a help system for jsXe.
    
    * Release new version (0.7.1)
