TODO:

* General

    & Slowly document methods with javadoc.

    & Slowly prefix instance variables with m_ as a naming convention.

    & DOMSerializer should support the following parameters:
        well-formed
        - Is this necessary? The DOM representation can't really be
          non-well-formed can it? It provides error checking for invalid
          characters and such.
        xml-declaration
        check-character-normalization
        entities
        normalize-characters
            This maybe needs to be done after I better understand and have
            built methods for interacting with the DTD.
        ignore-unknown-character-denormalizations

    & Serialized XML should be 100% well-formed and parsable.
    
* Version 0.3 beta (Plugin Support)
    
    * Finalize the class structure and public plugin interface as it will be
      harder to remove/deprecate methods after the introduction of plugins.
    
    * Fix bug when loading a jar file that's not a plugin. jsXe should not
      try to load it as a plugin. Need a way to tell the difference between
      a normal jar and a plugin jar.
    
    * Update the options dialog to show options from all installed views
    
    * jsXe should have a plugin manager window to display plugin information.
    
    * jsXe should load plugins from both ~/.jsxe/plugins and the install
      directory. The install directory can be located by checking the
      System.getProperty("jsxe.home") for JSXE_HOME environment variable (i
      think), or looking for jsXe.jar in the classpath. See jEdit.java,
      line 2633 (4.1), for an example.
    
    * Add support for dependency tracking of plugins. Some plugins may be
      dependent on others and so this may affect the order that they are
      loaded and error checking. Some plugins will require specific versions of
      jsXe as well.
    
    * Need some way of editing DOCTYPE nodes. DOM level 2 seems to not have
      support for this. jsXe needs to recognize when a document has a DTD and
      deal with serializing to it if necessary. Investigate XNI or whatever
      that is part of the xerces distribution as a way to do this.
    
    * Look into Marathon as a possible testing tool for jsXe. It seems to allow
      you to create unit test scripts for Java/Swing GUI apps.
      
    * Look into Junit as a tool for further testing of jsXe. This can be used
      to test data or model classes like AdapterNode and XMLDocument. It can
      also be used to test things that Marathon cannot test.
    
* Version 0.4 beta (Actions)
    
    * Implement cut, copy, paste in the DefaultView
    
    * Implement undo for the DefaultView and SourceView.
    
    * Implement BeanShell support. This is required for dynamic actions like
      those in jEdit. Create a way for actions to be created dynamically and
      then registered with jsXe. Much the same way that jEdit does.Is this
      really necessary? Can I achieve the same effect with actions that are not
      BeanShell actions?
    
    * Look at HistoryTextField and HistoryModel in jEdit. Use code from there
      to implement a history text model for combo boxes in jsXe
    
    * Fully implement gui actions to include key mnemonics etc. so the actions
      act like you would expect. Allow users to define keys shortcuts to
      actions.
    
    * Create a toolbar that is customizable much the same way jEdit's is.
	    
    * By this time, make sure all classes are documented with javadoc.
    
    * Make sure all instance variables are prefixed with m_ and are named in a
      consistent manner.
    
* Version 0.5 beta (DTD support and Threading)
    
    * Allow Views to be split so that one DocumentView can be displayed left/top
      and one on the right/bottom. Views should be able to update automatically
      using some sort of listener interface. How would you sync between views?
      Some will required well formedness or validation to a schema and some will
      not. What happens if one view invalidates the document with the other
      view?
    
    * Add threading support and allow multiple windows/Views to be open for one
      document at once. This can let you edit a document using one view and
      view it using another. Views should be able to update automatically using
      some sort of listener interface.  This will be another option to allow users
      to see more than one view of the document at the same time. How would you
      handle editing using a view that uses source and one that uses the tree
      structure at the same time?
    
    * Create an interface for the main view in jsXe where the TabbedView
      implements it. Other views can then be created to allow a more
      customizable look.
    
    * Add support for DTDs and Schema and add feedback about whether the
      current document can be validated by the DTD and what needs to be done to
      the document before it will comply with the DTD. Create interfaces to
      coincide with the XMLDocument interfaces that handles various Schema.
        * Look at some projects that convert DTD to Schema. This may be useful
          so that DTDs can be edited as Schema. Is that possible? DTDs seem to
          have features that aren't in Schema and don't translate at all.
        * Look at the XML plugin for jEdit for ways of finding what nodes can
          be inserted at various locations in the document.
    
    * Add a feature that allows you to validate the document and moves the
      cursor to the location of a parse/validation error in the source view.
    
    * Create some sort of interface to deal with editing of entity reference.
    
* Version 0.6 beta (GUI focus)
    
    * Enhance the source view with element completion and other cool stuff. See
      the XML plugin for jEdit for ideas. How would I display well-formedness
      errors?
        * Element completion
        * Highlighting where a parse error is located. Is it feasable to do
          multiple parses to find as many errors as possible? SAX parsers find
          the first one and then quit.
    
    * Implement syntax highlighting for the SourceView.
    
    * Create a dialog that displays all dirty DocumentBuffers and allows you to
      save the selected ones, like jEdit.
    
    * Create an install program for jsXe.
    
    * Add a ghosted image of the node to drag and drop cursor. Hopefully the
      whole cursor can be replaced with the image since the default drag
      cursor is dumb in linux.
    
    * Make a splash screen that displays on startup.
    
    * Create a help system for jsXe.
        * Create documentation for developing views with jsXe
            * Document how to use actions and components to handle saving
              settings and other general stuff.
    
* Version 0.7 beta
    
    * Implement some form of internationalization support.
    
    * Build into the interfaces support for printing. Implement printing
      support in the Default View and SourceView
    
    * Add a command line option so that a user can specify the view to open
      the document with. This will allow you to open large document in the
      source view without parsing it into the tree view using DOM.
    
    * Add an option when opening documents that lets users specify which
      installed view to open the document with.
    
    * Look for ways to improve efficiency with large XML documents
    
* Version 0.8 beta

    * Bug fixes?

* Version 0.9 beta

    * Bug fixes?

* Version 1.0

    * Bug fixes?

* Plugins
    
    * Implement the xsl transformation feature as a plugin.
    
    * Implement a plugin to view xsl:fo documents. Look at XSmiles for this.
      See www.x-smiles.org
    
    * Create a view that uses the view from pollo and implements the
      DocumentView interface. See pollo.sourceforge.net
    
    * Create a view that uses the view from Jaxe and implements the
      DocumentView interface. See jaxe.sourceforge.net
    
    * Create a view for editing doc-book files using the components in the
      Vex editor. See vex.sourceforge.net
    
    * Create a view for XHTML documents. This could probobly be an extension
      of the JEditorPane class that uses an adapter to attempt to transform
      XHTML into HTML 3.2 so that the canned JEditorPane can render it properly.
      Maybe XSmiles can do this too. See www.x-smiles.org. Maybe look for other
      java XHTML browsers.
    
    * Implement a JasperReports plugin that helps users view report definitions
      for jasper reports. Eventually add support to edit visually like the
      JasperAssistant. See jasperreports.sourceforge.net
    
    * Implement a Schema Diagram plugin that can show Shema as a flow like
      diagram. Look at the JGraph components for this. www.jgraph.com.
      Eventually add support to allow editing of schemas
    
