TODO:

* General

    & Slowly document methods with javadoc.

    & Slowly prefix instance variables with m_ as a naming convention.

    & Think about how the XMLDocument hierarchy should be. Most XMLDocuments
      are going to need the functionality in DefaultXMLDocument. Should
      XMLDocument have most of that logic in it and sub-classes define their own
      ways of determining if they are valid or something? Should
      DefaultXMLDocument just be called XMLDocument and the current XMLDocument
      be thrown out? Then other classes would extend XMLDocument and have
      methods specific to their application of XML?
    
    & DOMSerializer should support the following parameters:
        well-formed
        - Is this necessary? The DOM representation can't really be
          non-well-formed can it? It provides error checking for invalid
          characters and such.
        xml-declaration
        check-character-normalization
        entities

* Version 0.2.0
    
    * DOMSerializer needs to support the following parameters:
        cdata-sections
        normalize-characters
        ignore-unknown-character-denormalizations
        split-cdata-sections
    
    * Update to use the newest version of Xerces
    
    * Make sure jsXe can deal with all types of XML nodes.
        * Add support for creating every type of XML node.
        * Need to implement character normalization during serialization.
          Certain characters and character sequences will need to be converted
          to entities.
        * Serialized XML should be 100% well-formed and parsable.
    
    * Add at least minimal support for namespaces.
    
    * Add a status bar to the bottom that will show a buffer's status. Like if
      the buffer failed to be validated or parsed or whatever. It's not real
      clear to the user why they got kicked to the source view when they
      opened a document but a status bar could convey that info.
    
    * Clean up code. Be consistent about fold marks. Alphabetize methods.
    
* Version 0.3.0
    
    * Add a ghosted image of the node to drag and drop cursor. Hopefully the
      whole cursor can be replaced with the image since the default drag
      cursor is dumb in linux.
    
    * Store some options such as recent files and file specific options in
      an XML file with jsxe's options in the .jsxe folder in the home dir.

    * Make the XML document declaration header non-editable in source-view
      mode. (how?) Update it when the user changes options in the options panel.
    
    * Refactor the class structure and DocumentView classes
    
    * Fix the options dialog and make it look better. Maybe split into two
      dialogs, global options and view/document specific? Maybe even three
      dialogs, one for global options, one for view options, one for document
      options. Maybe make it like jEdit with a tree thing that displays
      option categories. So that way jsXe can have separate options for
      serialization and visualization and ...
    
    * Implement storing actions in an ActionSet or something so that actions
      can be retrieved easily.
    
    * Need some way of editing DOCTYPE nodes. DOM level 2 seems to not have
      support for this. jsXe needs to recognize when a document has a DTD and
      deal with serializing to it if necessary.
    
    * Build an adapter for DocumentBuilder so that it implements the DOM3
      standard DOMBuilder interface? Maybe use it with DOMSerializer to created
      filtered documents? Or use a TreeWalker to serialize (how)?
    
    * Use the Nodefilter interface with the DefaultView to determine which types
      of nodes to show.
    
    * Add full support for namespaces. (adding, editing, serialization, etc.)
    
    * Redo the interface for XMLDocuments and AdapterNodes so that DOM
      implementation used in a more limited way? Implement Document editing
      methods? Can I eventually make my own DOM implementation?
    
    * Implement undo for the DefaultView and SourceView.
    
* Version 0.4.0
    
    * Implement BeanShell support. This is required for dynamic actions like
      those in jEdit.
    
    * Create a way for actions to be created dynamically and then registered
      with jsXe. Much the same way that jEdit does.
    
    * Redo gui actions to include key mnemonics etc. so it acts like you would
      expect.
    
    * Implement a find dialog.
    
    * Create a toolbar that is customizable much the same way jEdit's is.
	    
	* Make a splash screen that displays on startup.

    * By this time, make sure all classes are documented with javadoc.
    
    * Make sure all instance variables are prefixed with m_ and are named in a
      consistent manner.
    
* Version 0.5.0
    
    * Create a feature to edit source for 1 node only. (Not sure how to do this
      given current design. How would I allow the source view to do that?)
    
    * Create an interface for the main view in jsXe where the TabbedView
      implements it. Other views can then be created to allow a more
      customizable look.
    
    * Implement syntax highlighting for the SourceView.
    
    * Create a history class for the DefaultView that keeps track of the current
      state of the view and can be used to restore it later.
    
    * Fix updating of the tree when users are changing a text node.
    
    * Add support for DTDs and add feedback about whether the current document
      can be validated by the DTD and what needs to be done to the document
      before it will comply with the DTD.
    
* Version 0.6.0
    
    * Implement some version of the DOM Document interfaces and add features
      such as the registering of listeners that can tell when the structure
      has changed and a builder that can give the location of a parser error
      etc. Is this reasonable/possible?
    
    * Create an install program for jsXe.
    
    * Create a help system for jsXe.
    
    * Implement validation against DTDs and different forms of Schema.
    
* Version 0.7.0
    
    * Finalize the class structure and public plugin interface as it will be
      harder to remove/deprecate methods after the introduction of plugins.
    
    * Implement plugin support with BeanShell. Make DocumentViews into plugins
      that are loaded at runtime. DefaultView and SourceView will be distributed
      with jsXe as the default views.
    
    * Add a way for jsXe to try to open a document in any of the installed views
      before it shows errors saying it cannot open the document. i.e. If a
      document is not validated try to open it in the requested view and if that
      fails then open it in one of the remaining installed views until it works
      or you run out of views.
    
    * Implement the xsl transformation feature as a plugin.
    
    * Create a view that uses the view from pollo and implements the
      DocumentView interface.
    
    * Create a view that is similar to the xeditor view if it's ok (it kind of
      has to be since jie bao used my GPL code his has to be open source too.)
    
* Version 0.8.0
    
    * Implement some form of internationalization support.
