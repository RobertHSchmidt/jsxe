<?xml version="1.0" encoding="UTF-8"?>
<!--
    :tabSize=2:indentSize=2:noTabs=true:
    :folding=explicit:collapseFolds=1:
    
    This is a build.xml file for building jsXe.
    Version: $Id$
    
    You should check out jsxe to make a structure like this. This ensures that
    when compiling jsXe the other views and will be compiled as well. It also
    ensures that you can build jsxe's installer in binary release distributions.
    
    jsxe module                       => jsxe/
    treeview module (optional)        => jsxe/jars/treeview
    sourceview module (optional)      => jsxe/jars/sourceview
    jsxe installer (optional)         => jsxe/installer
    jsxe web module (optional)        => web/
    launch4j (needed for win builds)  => buildlib/launch4j
    
-->
<project basedir="." default="compile" name="jsXe">
  
  <description>jsXe - Java Simple XML Editor</description>
  
  <!-- {{{ ============ Initializes properties and variables ============= -->
  <target name="init">
    <tstamp/>
    <!-- {{{ app/build properties -->
    <property name="app.name" value="jsXe"/>
    <property name="main.class" value="net.sourceforge.jsxe.jsXe"/>
    <property name="major.version" value="0"/>
    <property name="minor.version" value="5"/>
    <property name="beta.version" value="3"/>
    <property name="bugfix.version" value="0"/>
    <property name="date.format" value="MM.dd.yyyy HH:mm:ss z"/>
    <!-- Human Readable -->
    <property name="app.version" value="0.5 pre3"/>
    <!-- Used in filenames -->
    <property name="app_version" value="05_pre3"/>
    <!-- }}} -->
    <!-- {{{ build directories -->
    <property name="root.dir" value="."/>
    <property name="build.dir" value="${root.dir}/build"/>
    <property name="src.dir" value="${root.dir}/src"/>
    <property name="lib.dir" value="${root.dir}/lib"/>
    <property name="bin.dir" value="${root.dir}/bin"/>
    <property name="messages.dir" value="${root.dir}/messages"/>
    <property name="build.messages" value="${build.dir}/messages"/>
    <property name="docs.dir" value="${src.dir}/doc"/>
    <property name="plugin.dir" value="${root.dir}/jars"/>
    <property name="jsxe.jar" value="${build.dir}/${app.name}.jar"/>
    <!-- jar file needs to be relative to the exe -->
    <property name="launch4j.jsxe.jar" value="${app.name}.jar"/>
    <property name="jsxe.exe" value="${build.dir}/${app.name}.exe"/>
    <!-- launch4j doesn't like the ./ in the front of the path -->
    <property name="launch4j.jsxe.exe" value="build/${app.name}.exe"/>
    <property name="build.plugin" value="${build.dir}/jars"/>
    <property name="build.src" value="${build.dir}/src"/>
    <property name="build.dest" value="${build.dir}/classes"/>
    <property name="build.docs" value="${build.dir}/doc"/>
    <property name="build.lib" value="${build.dir}/lib"/>
    <property name="build.bin" value="${build.dir}/bin"/>
    <property name="build.javadocs" value="${build.dir}/api"/>
    <property name="build.help" value="${build.docs}/help"/>
    <property name="buildlib.dir" value="${root.dir}/buildlib"/>
    <!--<property name="app.version" value="${major.version}.${minor.version} beta"/>-->
    <!--<property name="app_version" value="${major.version}_${minor.version}beta"/>-->
    <property name="distbin.dir" value="${build.dir}/${app.name}-${app_version}-bin"/>
    <property name="distsrc.dir" value="${build.dir}/${app.name}-${app_version}-src"/>
    <property name="launch4j.dir" value="${buildlib.dir}/launch4j"/>
    <property name="launch4j.config" value="${root.dir}/launch4j.xml"/>
    <property name="launch4j.classpath" value="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar"/>
    <!-- }}} -->
    <!-- {{{ installer directories -->
    <property name="installer.build.dir" value="${build.dir}/installer"/>
    <property name="installer.program.dir" value="${installer.build.dir}/program"/>
    <property name="installer.api.dir" value="${installer.build.dir}/api"/>
    <property name="installer.treeview.dir" value="${installer.build.dir}/treeview"/>
    <property name="installer.sourceview.dir" value="${installer.build.dir}/sourceview"/>
    <property name="installer.win.dir" value="${installer.build.dir}/win"/>
    <property name="installer.gnome.dir" value="${installer.build.dir}/gnome"/>
    <property name="installer.build.src" value="${installer.build.dir}/src"/>
    <property name="installer.build.dest" value="${installer.build.dir}/build"/>
    <property name="install.props" value="${installer.build.dest}/installer/install.props"/>
    <property name="installer.dir" value="${root.dir}/installer"/>
    <property name="installer.launch4j.config" value="${installer.dir}/launch4j.xml"/>
    <!-- launch4j doesn't like the ./ in the front of the path -->
    <property name="installer.jar" value="build/${app.name}-${app_version}-install.jar"/>
    <property name="installer.exe" value="build/${app.name}-${app_version}-install.exe"/>
    <!-- }}} -->
    <!-- {{{ installer props -->
    <property name="installer.main.class" value="installer.Install"/>
    
    <!-- files listed here are in the ${installer.dir} directory -->
    <!-- TODO: labels should be put into a locale specific messages file -->
    <property name="app.readme" value="readme.html"/>
    <property name="app.license.title" value="GNU General Public License"/>
    <property name="app.license" value="gpl.html"/>
    <property name="ostask.unix-script.label" value="Install shortcut in:"/>
    <property name="ostask.unix-man.label" value="Install manual page in:"/>
    <property name="ostask.unix-desktop.label" value="Install desktop launchers in:"/>
    <property name="ostask.unix-desktop.shortcut" value="jsxe.desktop"/>
    <property name="ostask.unix-desktop.pixmap" value="jsxe.png"/>
    
    <!--<property name="ostask.unix-man.manpage" value="jsxe.1"/>-->
    <property name="comp.count" value="5"/>
    
    <property name="comp.0.name" value="jsXe XML Editor"/>
    <!-- size values are set by the filesize task in the
         build-installer task -->
    <!--<property name="comp.0.disk-size" value="7084"/>
    <property name="comp.0.real-size" value="6073"/>-->
    <property name="comp.0.fileset" value="jsxe-program"/>
    <property name="installer.build.program.tar" value="${installer.build.dest}/installer/${comp.0.fileset}.tar.bz2"/>
    
    <property name="comp.1.name" value="Tree view (highly recommended)"/>
    <!-- size values are set by the filesize task in the
         build-installer task -->
    <!--<property name="comp.1.disk-size" value="7084"/>
    <property name="comp.1.real-size" value="6073"/>-->
    <property name="comp.1.fileset" value="jsxe-treeview"/>
    <property name="installer.build.treeview.tar" value="${installer.build.dest}/installer/${comp.1.fileset}.tar.bz2"/>
    
    <property name="comp.2.name" value="Source view (highly recommended)"/>
    <!-- size values are set by the filesize task in the
         build-installer task -->
    <!--<property name="comp.2.disk-size" value="7084"/>
    <property name="comp.2.real-size" value="6073"/>-->
    <property name="comp.2.fileset" value="jsxe-sourceview"/>
    <property name="installer.build.sourceview.tar" value="${installer.build.dest}/installer/${comp.2.fileset}.tar.bz2"/>
    
    <property name="comp.3.name" value="API documentation (for plugin development)"/>
    <!-- size values are set by the filesize task in the
         build-installer task -->
    <!--<property name="comp.3.disk-size" value="7084"/>
    <property name="comp.3.real-size" value="6073"/>-->
    <property name="comp.3.fileset" value="jsxe-api"/>
    <property name="installer.build.api.tar" value="${installer.build.dest}/installer/${comp.3.fileset}.tar.bz2"/>
    
    <property name="comp.4.name" value="Windows Integration (highly recommended)"/>
    <!-- size values are set by the filesize task in the
         build-installer task -->
    <!--<property name="comp.4.disk-size" value="7084"/>
    <property name="comp.4.real-size" value="6073"/>-->
    <property name="comp.4.fileset" value="jsxe-win"/>
    <property name="comp.4.os" value="Windows"/>
    <property name="installer.build.win.tar" value="${installer.build.dest}/installer/${comp.4.fileset}.tar.bz2"/>
    <!-- }}} -->
    <!-- {{{ java build properties -->
    <property name="javac.debug" value="on"/>
    <property name="javac.optimize" value="off"/>
    <property name="javac.deprecation" value="on"/>
    <property name="javac.include.runtime" value="no"/>
    <property name="javac.source" value="1.3"/>
    <!-- }}} -->
    <!-- {{{ doc properties -->
    <property name="java.javadoc.link" value="http://java.sun.com/j2se/1.3/docs/api/"/>
    <property name="xerces.javadoc.link" value="http://xerces.apache.org/xerces2-j/javadocs/api/"/>
    <!-- }}} -->
    
    <!-- {{{ classpaths -->
    <path id="classpath">
      <pathelement location="."/>
      <pathelement location="${build.dest}"/>
      <pathelement location="${build.src}"/>
      <pathelement location="${src.dir}"/>
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </path>
    
    <path id="run-classpath">
      <pathelement location="${jsxe.jar}"/>
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
      </fileset>
    </path>
    <!-- }}} -->
    
    <!-- {{{ conditionals -->
    
    <!-- set whether we have the source for the default views -->
    
    <available file="${root.dir}/../web" property="web.avail"/>
    <available file="${plugin.dir}" property="plugin.avail"/>
    <available file="${plugin.dir}/treeview/build.xml" property="treeview.avail"/>
    <available file="${plugin.dir}/sourceview/build.xml" property="sourceview.avail"/>
    <available file="${launch4j.dir}" property="launch4j.avail"/>
    <available classname="org.apache.bsf.BSFException" property="bsf.avail"/>
    <available classname="org.mozilla.javascript.JavaScriptException" property="js.avail"/>
    
    <available file="${installer.dir}" property="installer.avail"/>
    
    <!-- }}} -->
    
    <echo message="${app.name} ${app.version}"/>
    <echo message="----------------------------------------------------------"/>
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Prepares for any type of build =================== -->
  <target depends="init" name="prepare">
    <mkdir dir="${build.dir}"/>
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Prepares the documentation ======================= -->
  <target depends="prepare" name="prepare-doc">
    <mkdir dir="${build.docs}"/>
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Prepares the source distribution ================= -->
  <target depends="prepare" name="prepare-src">
    <mkdir dir="${build.src}"/>
    <copy todir="${build.src}">
      <fileset dir="${src.dir}">
        <include name="**/*.java"/>
        <include name="**/*.props"/>
        <include name="**/*.properties"/>
        <include name="**/properties"/>
        <include name="**/*.xml"/>
        <!-- internal xml docs are not validated -->
        <!--<include name="**/*.dtd"/>-->
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
      </fileset>
    </copy>
    <mkdir dir="${build.plugin}"/>
    
    <antcall target="prepare-plugins"/>
    
    <mkdir dir="${build.messages}"/>
    <!--<copy todir="${build.messages}">
      <fileset dir="${messages.dir}">
        <include name="**/messages.*"/>
      </fileset>
    </copy>-->
    
    <!-- run native2ascii on these files -->
    <native2ascii encoding="UTF-8" src="${messages.dir}" dest="${build.messages}" includes="messages*"/>
  </target>
  <target name="prepare-plugins" if="plugin.avail">
    <copy todir="${build.plugin}">
      <fileset dir="${plugin.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Compiles the program ============================= -->
  <target depends="prepare-src" name="compile" description="compile jsXe">
    <mkdir dir="${build.dest}"/>
    <javac debug="${javac.debug}" deprecation="${javac.deprecation}" includeJavaRuntime="${javac.include.runtime}" optimize="${javac.optimize}" source="${javac.source}" destdir="${build.dest}" srcdir="${build.src}">
      <classpath refid="classpath"/>
      <include name="**/*.java"/>
    </javac>
    
    <copy todir="${build.dest}">
      <fileset dir="${build.src}">
        <include name="**/*.props"/>
        <include name="**/*.properties"/>
        <include name="**/properties"/>
        <include name="**/*.xml"/>
        <!-- internal xml docs are not validated -->
        <!--<include name="**/*.dtd"/>-->
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
      </fileset>
    </copy>
    
    <!-- copy the lib directory so that the jsXe.exe can be run
         from the build dir -->
    <mkdir dir="${build.lib}"/>
    <copy todir="${build.lib}">
      <fileset dir="${lib.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    
    <!-- set the build properties -->
    <propertyfile comment="${app.name}&apos;s build properties" file="${build.dest}/net/sourceforge/jsxe/build.properties">
      <entry key="application.name" value="${app.name}"/>
      <entry key="build.time" pattern="${date.format}" type="date" value="now"/>
      <entry key="major.version" value="${major.version}"/>
      <entry key="minor.version" value="${minor.version}"/>
      <entry key="beta.version" value="${beta.version}"/>
      <entry key="build.version" value="${bugfix.version}"/>
    </propertyfile>
    
    <!-- create jar manifest -->
    <manifest file="${build.dir}/${app.name}.manifest">
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Main-Class" value="${main.class}"/>
      <section name="common">
        <attribute name="Implementation-Title" value="${app.name}"/>
        <attribute name="Implementation-Version" value="${app.version} ${TODAY}"/>
      </section>
    </manifest>
    
    <jar jarfile="${jsxe.jar}" manifest="${build.dir}/${app.name}.manifest">
      <fileset dir="${build.dest}">
        <include name="**/*.class"/>
        <include name="**/properties"/>
        <include name="**/*.props"/>
        <include name="**/*.properties"/>
        <include name="**/*.xml"/>
        <!-- internal xml docs are not validated -->
        <!--<include name="**/*.dtd"/>-->
        <include name="**/*.jpg"/>
        <include name="**/*.png"/>
      </fileset>
    </jar>
    
    <!-- compile default views -->
    <antcall target="build-treeview"/>
    <antcall target="build-sourceview"/>
  </target>
  <target name="build-treeview" if="treeview.avail">
    <ant inheritAll="false" dir="${build.plugin}/treeview/" target="compile"/>
  </target>
  <target name="build-sourceview" if="sourceview.avail">
    <ant inheritAll="false" dir="${build.plugin}/sourceview/" target="compile"/>
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Run the program ================================== -->
  <target depends="compile" name="run" description="run jsXe">
    <java fork="true" classname="${main.class}">
      <classpath refid="run-classpath"/>
    </java>
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Run the program in debug mode ==================== -->
  <target depends="compile" name="debug" description="run jsXe in debug mode">
    <java fork="true" classname="${main.class}">
      <classpath refid="run-classpath"/>
      <arg value="--debug"/>
    </java>
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Prepares for a build ============================= -->
  <target depends="init" name="prepare-build">
    <!-- bin -->
    <mkdir dir="${build.dir}/bin"/>
    <copy todir="${build.dir}/bin">
      <fileset dir="${bin.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Generates the documentation ====================== -->
  <target depends="prepare-doc, prepare-src" name="doc" description="Build documentation">
    <copy file="${root.dir}/COPYING" tofile="${build.docs}/COPYING"/>
    <copy file="${root.dir}/README" tofile="${build.docs}/README"/>
    <copy file="${root.dir}/AUTHORS" tofile="${build.docs}/AUTHORS"/>
    <copy file="${root.dir}/ISSUES" tofile="${build.docs}/ISSUES"/>
    <copy file="${root.dir}/Changelog" tofile="${build.docs}/Changelog"/>
    <copy file="${root.dir}/INSTALL" tofile="${build.docs}/INSTALL"/>
    <copy file="${root.dir}/THANKS" tofile="${build.docs}/THANKS"/>
    <copy file="${root.dir}/NEWS" tofile="${build.docs}/NEWS"/>
    
    <javadoc author="true" destdir="${build.javadocs}" doctitle="${app.name} ${app.version} API" locale="en_US" packagenames="*" sourcepath="${build.src}" version="true" windowtitle="${app.name} ${app.version} API">
      <link href="${java.javadoc.link}"/>
      <link href="${xerces.javadoc.link}"/>
    </javadoc>
    
    <zip basedir="${build.javadocs}" includes="**/*" zipfile="${build.dir}/${app.name}-${app_version}-api.zip"/>
    
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Builds the installer ============================= -->
  <target depends="compile, prepare-build, doc" name="build-installer" description="Builds the installer">
    
    <fail unless="js.avail" message="You must have the ${buildlib.dir}/js.jar in your classpath to build the installer. It is located in the ${buildlib.dir} directory. See http://ant.apache.org/manual/install.html#librarydependencies"/>
    <fail unless="bsf.avail" message="You must have the ${buildlib.dir}/bsf.jar in your classpath to build the installer. It is located in the ${buildlib.dir} directory. See http://ant.apache.org/manual/install.html#librarydependencies"/>
    <fail unless="launch4j.avail" message="You must install launch4j in ${launch4j.dir} or change the launch4j.dir property in build.xml"/>
    <fail unless="treeview.avail" message="You must have the treeview source available to build the installer."/>
    <fail unless="sourceview.avail" message="You must have the sourceview source available to build the installer."/>
    
    <!-- {{{ filesize script definition -->
    <!-- taken from the ant manual 
         modified to get the total size of a directory structure
         and set it to a property in Kb -->
    <scriptdef name="filesize" language="javascript">
      <element name="fileset" type="fileset"/>
      <attribute name="property"/>
      <![CDATA[
        // import statements
        // importPackage(java.io);
        importClass(java.io.File);
        
        // Create a <fileset dir="" includes=""/>
        filesets = elements.get("fileset");
        
        for (i = 0; i < filesets.size(); i++) {
          fs = filesets.get(i);
          
          // Get the files (array) of that fileset
          ds = fs.getDirectoryScanner(project);
          srcFiles = ds.getIncludedFiles();
          
          size = 0;
          // iterate over that array
          for (i=0; i<srcFiles.length; i++) {
            
            // get the values via Java API
            var basedir  = fs.getDir(project);
            var filename = srcFiles[i];
            var file = new File(basedir, filename);
            
            size += file.length();
          }
          
          roundedSize = Math.round(size/1024);
          
          echo = project.createTask("echo");
          echo.setMessage("Size: "+roundedSize+"Kb");
          echo.perform();
          project.setNewProperty(attributes.get("property"), roundedSize);
        }
      ]]>
    </scriptdef>
    <!-- }}} -->
    
    <!-- copy the installer source -->
    <mkdir dir="${installer.build.dir}"/>
    <copy todir="${installer.build.dir}">
      <fileset dir="${installer.dir}">
        <include name="**/*.java"/>
      </fileset>
    </copy>
    
    <!-- build the installer -->
    <mkdir dir="${installer.build.dest}"/>
    <javac debug="${javac.debug}" deprecation="${javac.deprecation}" includeJavaRuntime="${javac.include.runtime}" optimize="${javac.optimize}" source="${javac.source}" destdir="${installer.build.dest}" srcdir="${installer.build.src}">
      <include name="**/*.java"/>
    </javac>
    
    <!-- copy html files -->
    <copy todir="${installer.build.dest}/installer">
      <fileset dir="${installer.dir}">
        <include name="*.html"/>
      </fileset>
    </copy>
    
    <!-- copy other files -->
    <copy todir="${installer.build.dest}">
      <fileset dir="${installer.dir}">
        <exclude name="*.html"/>
        <include name="*"/>
      </fileset>
    </copy>
    
    <!-- {{{ create the program tar.bz2 file -->
    
    <mkdir dir="${installer.program.dir}"/>
    
    <mkdir dir="${installer.program.dir}/jars"/>
    
    <!-- doc -->
    <mkdir dir="${installer.program.dir}/doc"/>
    <copy todir="${installer.program.dir}/doc">
      <fileset dir="${build.docs}">
        <include name="**/*"/>
      </fileset>
    </copy>
    
    <!-- messages -->
    <mkdir dir="${installer.program.dir}/messages"/>
    <copy todir="${installer.program.dir}/messages">
      <fileset dir="${build.messages}">
        <include name="**/messages*"/>
      </fileset>
    </copy>
    
    <copy file="${jsxe.jar}" todir="${installer.program.dir}"/>
    <!-- lib -->
    <mkdir dir="${installer.program.dir}/lib"/>
    <copy todir="${installer.program.dir}/lib">
      <fileset dir="${build.lib}">
        <include name="**/*"/>
      </fileset>
    </copy>
    
    <!-- create the tar.bz2 for the installer -->
    <tar basedir="${installer.program.dir}" includes="**/*" tarfile="${installer.build.dir}/${app.name}-${app_version}-program.tar"/>
    <bzip2 src="${installer.build.dir}/${app.name}-${app_version}-program.tar" destfile="${installer.build.program.tar}"/>
    <delete file="${installer.build.dir}/${app.name}-${app_version}-program.tar"/>
    
    <!-- find the file size of the files on disk and compressed files -->
    <filesize property="comp.0.disk-size">
      <fileset dir="${installer.program.dir}">
        <include name="**/*"/>
      </fileset>
    </filesize>
    
    <filesize property="comp.0.real-size">
      <fileset file="${installer.build.program.tar}"/>
    </filesize>
    
    <!-- }}} -->
    
    <!-- {{{ create the treeview tar.bz2 file -->
    
    <mkdir dir="${installer.treeview.dir}"/>
    <mkdir dir="${installer.treeview.dir}/jars"/>
    <copy todir="${installer.treeview.dir}/jars" file="${build.plugin}/treeview.jar"/>
    
    <tar basedir="${installer.treeview.dir}" includes="**/*" tarfile="${installer.build.dir}/${app.name}-${app_version}-treeview.tar"/>
    <bzip2 src="${installer.build.dir}/${app.name}-${app_version}-treeview.tar" destfile="${installer.build.treeview.tar}"/>
    <delete file="${installer.build.dir}/${app.name}-${app_version}-treeview.tar"/>
    
    <!-- find the file size of the files on disk and compressed files -->
    <filesize property="comp.1.disk-size">
      <fileset dir="${installer.treeview.dir}">
        <include name="**/*"/>
      </fileset>
    </filesize>
    
    <filesize property="comp.1.real-size">
      <fileset file="${installer.build.treeview.tar}"/>
    </filesize>
    
    <!-- }}} -->
    
    <!-- {{{ create the sourceview tar.bz2 file -->
    
    <mkdir dir="${installer.sourceview.dir}"/>
    <mkdir dir="${installer.sourceview.dir}/jars"/>
    <copy todir="${installer.sourceview.dir}/jars" file="${build.plugin}/sourceview.jar"/>
    
    <tar basedir="${installer.sourceview.dir}" includes="**/*" tarfile="${installer.build.dir}/${app.name}-${app_version}-sourceview.tar"/>
    <bzip2 src="${installer.build.dir}/${app.name}-${app_version}-sourceview.tar" destfile="${installer.build.sourceview.tar}"/>
    <delete file="${installer.build.dir}/${app.name}-${app_version}-sourceview.tar"/>
    
    <!-- find the file size of the files on disk and compressed files -->
    <filesize property="comp.2.disk-size">
      <fileset dir="${installer.sourceview.dir}">
        <include name="**/*"/>
      </fileset>
    </filesize>
    
    <filesize property="comp.2.real-size">
      <fileset file="${installer.build.sourceview.tar}"/>
    </filesize>
    
    <!-- }}} -->
    
    <!-- {{{ create the api tar.bz2 file -->
    
    <mkdir dir="${installer.api.dir}"/>
    <mkdir dir="${installer.api.dir}/api"/>
    <copy todir="${installer.api.dir}/api">
      <fileset dir="${build.javadocs}">
        <include name="**/*"/>
      </fileset>
    </copy>
    
    <tar basedir="${installer.api.dir}" excludes="*.class" includes="api/**" tarfile="${installer.build.dir}/${app.name}-${app_version}-api.tar"/>
    <bzip2 src="${installer.build.dir}/${app.name}-${app_version}-api.tar" destfile="${installer.build.api.tar}"/>
    <delete file="${installer.build.dir}/${app.name}-${app_version}-api.tar"/>
    
    <!-- find the file size of the files on disk and compressed files -->
    <filesize property="comp.3.disk-size">
      <fileset dir="${installer.api.dir}">
        <include name="**/*"/>
      </fileset>
    </filesize>
    
    <filesize property="comp.3.real-size">
      <fileset file="${installer.build.api.tar}"/>
    </filesize>
    
    <!-- }}} -->
    
    <!-- {{{ create the win tar.bz2 file -->
    
    <!-- create the windows exe -->
    <taskdef name="launch4j"
      classname="net.sf.launch4j.ant.Launch4jTask"
      classpath="${launch4j.classpath}"/>
    
    <launch4j configFile="${launch4j.config}"
              outfile="${launch4j.jsxe.exe}"
              jarPath="${launch4j.jsxe.jar}"
              />
    
    <mkdir dir="${installer.win.dir}"/>
    <copy file="${jsxe.exe}" todir="${installer.win.dir}" />
    
    <tar basedir="${installer.win.dir}" includes="**/*" tarfile="${installer.build.dir}/${app.name}-${app_version}-win.tar"/>
    <bzip2 src="${installer.build.dir}/${app.name}-${app_version}-win.tar" destfile="${installer.build.win.tar}"/>
    <delete file="${installer.build.dir}/${app.name}-${app_version}-win.tar"/>
    
    <!-- find the file size of the files on disk and compressed files -->
    <filesize property="comp.4.disk-size">
      <fileset dir="${installer.win.dir}">
        <include name="**/*"/>
      </fileset>
    </filesize>
    
    <filesize property="comp.4.real-size">
      <fileset file="${installer.build.win.tar}"/>
    </filesize>
    
    <!-- }}} -->
    
    <!-- {{{ create the install.props file -->
    <propertyfile comment="${app.name}&apos;s installer properties" file="${install.props}">
      <entry key="app.name" value="${app.name}"/>
      <entry key="app.version" value="${app.version}"/>
      <entry key="app.readme" value="${app.readme}"/>
      <entry key="app.license.title" value="${app.license.title}"/>
      <entry key="app.license" value="${app.license}"/>
      <entry key="ostask.unix-script.label" value="${ostask.unix-script.label}"/>
      <entry key="ostask.unix-desktop.label" value="${ostask.unix-desktop.label}"/>
      <entry key="ostask.unix-desktop.pixmap" value="${ostask.unix-desktop.pixmap}"/>
      <entry key="ostask.unix-desktop.shortcut" value="${ostask.unix-desktop.shortcut}"/>
      
      <!--<entry key="ostask.unix-man.label" value="${ostask.unix-man.label}"/>-->
      <entry key="comp.count" value="${comp.count}"/>
      <entry key="comp.0.name" value="${comp.0.name}"/>
      <entry key="comp.0.disk-size" value="${comp.0.disk-size}"/>
      <entry key="comp.0.real-size" value="${comp.0.real-size}"/>
      <entry key="comp.0.fileset" value="${comp.0.fileset}"/>
      
      <entry key="comp.1.name" value="${comp.1.name}"/>
      <entry key="comp.1.disk-size" value="${comp.1.disk-size}"/>
      <entry key="comp.1.real-size" value="${comp.1.real-size}"/>
      <entry key="comp.1.fileset" value="${comp.1.fileset}"/>
      
      <entry key="comp.2.name" value="${comp.2.name}"/>
      <entry key="comp.2.disk-size" value="${comp.2.disk-size}"/>
      <entry key="comp.2.real-size" value="${comp.2.real-size}"/>
      <entry key="comp.2.fileset" value="${comp.2.fileset}"/>
      
      <entry key="comp.3.name" value="${comp.3.name}"/>
      <entry key="comp.3.disk-size" value="${comp.3.disk-size}"/>
      <entry key="comp.3.real-size" value="${comp.3.real-size}"/>
      <entry key="comp.3.fileset" value="${comp.3.fileset}"/>
      
      <entry key="comp.4.name" value="${comp.4.name}"/>
      <entry key="comp.4.disk-size" value="${comp.4.disk-size}"/>
      <entry key="comp.4.real-size" value="${comp.4.real-size}"/>
      <entry key="comp.4.fileset" value="${comp.4.fileset}"/>
      <entry key="comp.4.os" value="${comp.4.os}"/>
      
    </propertyfile>
    <!-- }}} -->
    
    <!-- {{{ create the manifest -->
    <manifest file="${installer.build.dir}/installer.manifest">
      <attribute name="Built-By" value="${user.name}"/>
      <attribute name="Main-Class" value="${installer.main.class}"/>
      <section name="common">
        <attribute name="Implementation-Title" value="${app.name}"/>
        <attribute name="Implementation-Version" value="${app.version} ${TODAY}"/>
      </section>
    </manifest>
    <!-- }}} -->
    
    <!-- {{{ create the install jar -->
    <jar jarfile="${installer.jar}" manifest="${installer.build.dir}/installer.manifest">
      <fileset dir="${installer.build.dest}">
        <include name="**/*"/>
      </fileset>
    </jar>
    <!-- }}} -->
    
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Generates a windows distribution ================= -->
  <target depends="build-installer" name="win" description="Build a windows distribution">
    <taskdef name="launch4j"
      classname="net.sf.launch4j.ant.Launch4jTask"
      classpath="${launch4j.classpath}"/>
    
    <launch4j configFile="${installer.launch4j.config}" 
              jar="${installer.jar}"
              outfile="${installer.exe}"/>
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Generates the binary distribution ================ -->
  <target depends="compile, prepare-build, doc" name="bin" description="Build binary distributions">
    
    <!-- plugins -->
    <mkdir dir="${distbin.dir}/jars"/>
    <copy todir="${distbin.dir}/jars">
      <fileset dir="${build.plugin}">
        <include name="*.jar"/>
      </fileset>
    </copy>
    
    <!-- doc -->
    <mkdir dir="${distbin.dir}/doc"/>
    <copy todir="${distbin.dir}/doc">
      <fileset dir="${build.docs}">
        <include name="**/*"/>
      </fileset>
    </copy>
    
    
    <!-- api -->
    <mkdir dir="${distbin.dir}/doc/api"/>
    <copy todir="${distbin.dir}/doc/api">
      <fileset dir="${build.javadocs}">
        <include name="**/*"/>
      </fileset>
    </copy>
    
    <!-- bin -->
    <mkdir dir="${distbin.dir}/bin"/>
    <copy todir="${distbin.dir}/bin">
      <fileset dir="${build.bin}">
        <include name="**/*"/>
      </fileset>
    </copy>
    
    <!-- messages -->
    <mkdir dir="${distbin.dir}/messages"/>
    <copy todir="${distbin.dir}/messages">
      <fileset dir="${build.messages}">
        <include name="**/messages*"/>
      </fileset>
    </copy>
    
    <copy file="${jsxe.jar}" todir="${distbin.dir}"/>
    <!-- lib -->
    <mkdir dir="${distbin.dir}/lib"/>
    <copy todir="${distbin.dir}/lib">
      <fileset dir="${build.lib}">
        <include name="**/*"/>
      </fileset>
    </copy>
    
    <!-- create the zip distr -->
    <zip basedir="${build.dir}" excludes="*.class" includes="${app.name}-${app_version}-bin/**" zipfile="${build.dir}/${app.name}-${app_version}-bin.zip"/>
    
    <!-- create the tar.bz2 distr -->
    <tar basedir="${build.dir}" excludes="*.class" includes="${app.name}-${app_version}-bin/**" tarfile="${build.dir}/${app.name}-${app_version}-bin.tar"/>
    <bzip2 src="${build.dir}/${app.name}-${app_version}-bin.tar" destfile="${build.dir}/${app.name}-${app_version}-bin.tar.bz2"/>
    <delete file="${build.dir}/${app.name}-${app_version}-bin.tar"/>
    
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Generates the source distribution ================ -->
  <target depends="prepare-build, prepare-src, doc" name="src" description="Build source distribution">
    
    <antcall target="copy-treeview-source"/>
    <antcall target="copy-sourceview-source"/>
    <antcall target="copy-installer-source"/>
    
    <!-- doc -->
    <mkdir dir="${distsrc.dir}/doc"/>
    <copy todir="${distsrc.dir}/doc">
      <fileset dir="${build.docs}">
        <include name="**/*"/>
      </fileset>
    </copy>
    
    <!-- api -->
    <mkdir dir="${distsrc.dir}/doc/api"/>
    <copy todir="${distsrc.dir}/doc/api">
      <fileset dir="${build.javadocs}">
        <include name="**/*"/>
      </fileset>
    </copy>
    
    <!-- move these files to the root dir of the src distribution -->
    <move file="${distsrc.dir}/doc/COPYING" tofile="${distsrc.dir}/COPYING"/>
    <move file="${distsrc.dir}/doc/README" tofile="${distsrc.dir}/README"/>
    <move file="${distsrc.dir}/doc/AUTHORS" tofile="${distsrc.dir}/AUTHORS"/>
    <move file="${distsrc.dir}/doc/ISSUES" tofile="${distsrc.dir}/ISSUES"/>
    <move file="${distsrc.dir}/doc/Changelog" tofile="${distsrc.dir}/Changelog"/>
    <move file="${distsrc.dir}/doc/INSTALL" tofile="${distsrc.dir}/INSTALL"/>
    <move file="${distsrc.dir}/doc/THANKS" tofile="${distsrc.dir}/THANKS"/>
    <move file="${distsrc.dir}/doc/NEWS" tofile="${distsrc.dir}/NEWS"/>
    
    <!-- build files -->
    <copy todir="${distsrc.dir}">
      <fileset dir="${root.dir}">
        <include name="build.xml"/>
      </fileset>
    </copy>
    <!-- bin -->
    <mkdir dir="${distsrc.dir}/bin"/>
    <copy todir="${distsrc.dir}/bin">
      <fileset dir="${build.bin}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <!-- src -->
    <mkdir dir="${distsrc.dir}/src"/>
    <copy todir="${distsrc.dir}/src">
      <fileset dir="${build.src}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <!-- lib -->
    <mkdir dir="${distsrc.dir}/lib"/>
    <copy todir="${distsrc.dir}/lib">
      <fileset dir="${build.lib}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <!-- buildlib -->
    <mkdir dir="${distsrc.dir}/buildlib"/>
    <copy todir="${distsrc.dir}/buildlib">
      <fileset dir="${buildlib.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
    <copy todir="${distsrc.dir}" file="${launch4j.config}"/>
    
    <!-- messages -->
    <mkdir dir="${distsrc.dir}/messages"/>
    <copy todir="${distsrc.dir}/messages">
      <fileset dir="${build.messages}">
        <include name="**/messages*"/>
      </fileset>
    </copy>
    
    <!-- create the zip -->
    <zip basedir="${build.dir}" excludes="*.class" includes="${app.name}-${app_version}-src/**" zipfile="${build.dir}/${app.name}-${app_version}-src.zip"/>
    
    <!-- create the tar.bz2 distr -->
    <tar basedir="${build.dir}" excludes="*.class" includes="${app.name}-${app_version}-src/**" tarfile="${build.dir}/${app.name}-${app_version}-src.tar"/>
    <bzip2 src="${build.dir}/${app.name}-${app_version}-src.tar" destfile="${build.dir}/${app.name}-${app_version}-src.tar.bz2"/>
    <delete file="${build.dir}/${app.name}-${app_version}-src.tar"/>
    
  </target>
  <target name="copy-treeview-source" if="treeview.avail">
    <copy todir="${distsrc.dir}/jars">
      <fileset dir="${build.dir}/jars/">
        <include name="treeview/**/*"/>
        <exclude name="treeview/build"/>
        <exclude name="treeview/build/**/*"/>
        <exclude name="treeview/treeview.manifest"/>
      </fileset>
    </copy>
  </target>
  <target name="copy-sourceview-source" if="sourceview.avail">
    <copy todir="${distsrc.dir}/jars">
      <fileset dir="${build.dir}/jars/">
        <include name="sourceview/**/*"/>
        <exclude name="sourceview/build"/>
        <exclude name="sourceview/build/**/*"/>
        <exclude name="sourceview/sourceview.manifest"/>
      </fileset>
    </copy>
  </target>
  <target name="copy-installer-source" if="installer.avail">
    <copy todir="${distsrc.dir}/installer">
      <fileset dir="${installer.dir}">
        <include name="**/*"/>
      </fileset>
    </copy>
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Deploys documentation to the web module ========== -->
  <target depends="doc" name="deploy-web-doc" if="web.avail" description="Deploy documentation to the web module">
    <copy file="${build.dir}/${app.name}-${app_version}-api.zip" tofile="${root.dir}/../web/api.zip"/>
  </target>
  <!-- }}} -->
  <!-- {{{ ============ Cleans everything up ============================= -->
  <target depends="init" name="clean" description="Clean up distribution tree">
    <delete dir="${build.dir}"/>
    <delete>
      <fileset dir="." includes="**/*.class"/>
      <fileset dir="." includes="**/*.rej"/>
      <fileset dir="." includes="**/*.orig"/>
      <fileset dir="." includes="**/.*.swp"/>
      <fileset dir="." includes="**/.#*"/>
      <fileset dir="." includes="**/.new*"/>
      <fileset dir="." includes="**/.directory"/>
      <fileset dir="." includes="**/.xvpics"/>
    </delete>
    <!--<antcall target="clean-treeview"/>-->
    <!--<antcall target="clean-sourceview"/>-->
  </target>
  <!--<target name="clean-treeview" if="treeview.avail">
    <ant inheritAll="false" dir="${plugin.dir}/treeview/" target="clean"/>
  </target>
  <target name="clean-sourceview" if="sourceview.avail">
    <ant inheritAll="false" dir="${plugin.dir}/sourceview/" target="clean"/>
  </target>-->
  <!-- }}} -->
</project>